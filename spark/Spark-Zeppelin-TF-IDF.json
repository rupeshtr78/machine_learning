{"paragraphs":[{"text":"%md\n## Load Data\nLoading up a people_wiki.csv of real Wikipedia data.\nhttps://www.kaggle.com/sameersmahajan/people-wikipedia-data\n\n","user":"anonymous","dateUpdated":"2020-01-22T12:19:19-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Load Data</h2>\n<p>Loading up a people_wiki.csv of real Wikipedia data.<br/><a href=\"https://www.kaggle.com/sameersmahajan/people-wikipedia-data\">https://www.kaggle.com/sameersmahajan/people-wikipedia-data</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196027_1494464331","id":"20190920-180850_1654831926","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:19:19-0600","dateFinished":"2020-01-22T12:19:24-0600","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:331"},{"text":"%spark.pyspark\n\nrawData = spark.read.options(sep=\",\").csv(\"data/people_wiki.csv\",header=True)\nrawData.show()","user":"anonymous","dateUpdated":"2020-01-22T12:07:34-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+\n|                 URI|                name|                text|\n+--------------------+--------------------+--------------------+\n|<http://dbpedia.o...|       Digby Morrell|digby morrell bor...|\n|<http://dbpedia.o...|      Alfred J. Lewy|alfred j lewy aka...|\n|<http://dbpedia.o...|       Harpdog Brown|harpdog brown is ...|\n|<http://dbpedia.o...| Franz Rottensteiner|franz rottenstein...|\n|<http://dbpedia.o...|              G-Enka|henry krvits born...|\n|<http://dbpedia.o...|       Sam Henderson|sam henderson bor...|\n|<http://dbpedia.o...|       Aaron LaCrate|aaron lacrate is ...|\n|<http://dbpedia.o...|     Trevor Ferguson|trevor ferguson a...|\n|<http://dbpedia.o...|        Grant Nelson|grant nelson born...|\n|<http://dbpedia.o...|        Cathy Caruth|cathy caruth born...|\n|<http://dbpedia.o...|        Sophie Crumb|sophia violet sop...|\n|<http://dbpedia.o...|       Jenn Ashworth|jenn ashworth is ...|\n|<http://dbpedia.o...|    Jonathan Hoefler|jonathan hoefler ...|\n|<http://dbpedia.o...|Anthony Gueterboc...|anthony fitzhardi...|\n|<http://dbpedia.o...|  David Chernushenko|david chernushenk...|\n|<http://dbpedia.o...|      Joerg Steineck|joerg steineck is...|\n|<http://dbpedia.o...|      Andrew Pinsent|fr andrew pinsent...|\n|<http://dbpedia.o...|Paddy Dunne (Gael...|paddy dunne was a...|\n|<http://dbpedia.o...|   Alexandros Mouzas|alexandros mouzas...|\n|<http://dbpedia.o...| John Angus Campbell|john angus campbe...|\n+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579713196043_1500955112","id":"20190919-161908_2032716933","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:07:34-0600","dateFinished":"2020-01-22T12:07:35-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"%md\n\nRename Some Columns not Required","user":"anonymous","dateUpdated":"2020-01-22T12:19:56-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Rename Some Columns not Required</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196047_1303779121","id":"20190920-180945_494109303","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:19:56-0600","dateFinished":"2020-01-22T12:19:56-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333"},{"text":"%spark.pyspark\n\narticles = rawData.toDF(\"URI\", \"Name\", \"Document\")\narticles.show()","user":"anonymous","dateUpdated":"2020-01-22T12:09:05-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+\n|                 URI|                Name|            Document|\n+--------------------+--------------------+--------------------+\n|<http://dbpedia.o...|       Digby Morrell|digby morrell bor...|\n|<http://dbpedia.o...|      Alfred J. Lewy|alfred j lewy aka...|\n|<http://dbpedia.o...|       Harpdog Brown|harpdog brown is ...|\n|<http://dbpedia.o...| Franz Rottensteiner|franz rottenstein...|\n|<http://dbpedia.o...|              G-Enka|henry krvits born...|\n|<http://dbpedia.o...|       Sam Henderson|sam henderson bor...|\n|<http://dbpedia.o...|       Aaron LaCrate|aaron lacrate is ...|\n|<http://dbpedia.o...|     Trevor Ferguson|trevor ferguson a...|\n|<http://dbpedia.o...|        Grant Nelson|grant nelson born...|\n|<http://dbpedia.o...|        Cathy Caruth|cathy caruth born...|\n|<http://dbpedia.o...|        Sophie Crumb|sophia violet sop...|\n|<http://dbpedia.o...|       Jenn Ashworth|jenn ashworth is ...|\n|<http://dbpedia.o...|    Jonathan Hoefler|jonathan hoefler ...|\n|<http://dbpedia.o...|Anthony Gueterboc...|anthony fitzhardi...|\n|<http://dbpedia.o...|  David Chernushenko|david chernushenk...|\n|<http://dbpedia.o...|      Joerg Steineck|joerg steineck is...|\n|<http://dbpedia.o...|      Andrew Pinsent|fr andrew pinsent...|\n|<http://dbpedia.o...|Paddy Dunne (Gael...|paddy dunne was a...|\n|<http://dbpedia.o...|   Alexandros Mouzas|alexandros mouzas...|\n|<http://dbpedia.o...| John Angus Campbell|john angus campbe...|\n+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579713196051_1538509165","id":"20190919-161933_473522612","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:09:05-0600","dateFinished":"2020-01-22T12:09:06-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"%md\n\n## Clean Data","user":"anonymous","dateUpdated":"2020-01-22T12:20:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Clean Data</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196054_1328092085","id":"20190920-181017_61885597","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:20:27-0600","dateFinished":"2020-01-22T12:20:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335"},{"text":"%spark.pyspark\n\narticles.filter(articles.Document.isNull()).count()","user":"anonymous","dateUpdated":"2020-01-22T12:09:13-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0\n"}]},"apps":[],"jobName":"paragraph_1579713196057_930311688","id":"20190920-180515_53110340","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:09:13-0600","dateFinished":"2020-01-22T12:09:17-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"text":"%md\n\nThere are no Null Columns incase you encounter one run the code below","user":"anonymous","dateUpdated":"2020-01-22T12:21:09-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>There are no Null Columns incase you encounter one run the code below</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196060_-763121493","id":"20190920-181048_2018791814","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:21:09-0600","dateFinished":"2020-01-22T12:21:09-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"text":"%spark.pyspark\n\ncleanedArticles = articles.filter(articles.Document.isNotNull())\n\ncleanedArticles.filter(cleanedArticles.Document.isNull()).count()","user":"anonymous","dateUpdated":"2020-01-22T12:09:29-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0\n"}]},"apps":[],"jobName":"paragraph_1579713196062_-2090296102","id":"20190920-180545_399141225","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:09:29-0600","dateFinished":"2020-01-22T12:09:32-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"%md\n## Pre Processing\nTF/IDF wants data in numeric from , not words.  \nTokenize the articles to split up them up into an array of individual words, and hash each word to a numeric value. \nHashed words will be stored in a sparse vector which is a numeric representation of the words in each article.","user":"anonymous","dateUpdated":"2020-01-22T12:51:55-0600","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Pre Processing</h2>\n<p>TF/IDF wants data in numeric from , not words.<br/>Tokenize the articles to split up them up into an array of individual words, and hash each word to a numeric value.<br/>Hashed words will be stored in a sparse vector which is a numeric representation of the words in each article.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196065_-1102079981","id":"20190920-181137_1226572311","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:22:30-0600","dateFinished":"2020-01-22T12:22:30-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"text":"%spark.pyspark\n\nfrom pyspark.ml.feature import HashingTF, IDF, Tokenizer\n\ntokenizer = Tokenizer(inputCol=\"Document\", outputCol=\"tokenWords\")\nwordsData = tokenizer.transform(cleanedArticles)\n\nhashingTF = HashingTF(inputCol=\"tokenWords\", outputCol=\"hashWords\")\nfeaturizedData = hashingTF.transform(wordsData)\nfeaturizedData.show()","user":"anonymous","dateUpdated":"2020-01-22T12:23:39-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+--------------------+--------------------+\n|                 URI|                Name|            Document|          tokenWords|           hashWords|\n+--------------------+--------------------+--------------------+--------------------+--------------------+\n|<http://dbpedia.o...|       Digby Morrell|digby morrell bor...|[digby, morrell, ...|(262144,[4081,410...|\n|<http://dbpedia.o...|      Alfred J. Lewy|alfred j lewy aka...|[alfred, j, lewy,...|(262144,[1215,236...|\n|<http://dbpedia.o...|       Harpdog Brown|harpdog brown is ...|[harpdog, brown, ...|(262144,[3008,440...|\n|<http://dbpedia.o...| Franz Rottensteiner|franz rottenstein...|[franz, rottenste...|(262144,[1232,214...|\n|<http://dbpedia.o...|              G-Enka|henry krvits born...|[henry, krvits, b...|(262144,[2366,659...|\n|<http://dbpedia.o...|       Sam Henderson|sam henderson bor...|[sam, henderson, ...|(262144,[329,412,...|\n|<http://dbpedia.o...|       Aaron LaCrate|aaron lacrate is ...|[aaron, lacrate, ...|(262144,[571,672,...|\n|<http://dbpedia.o...|     Trevor Ferguson|trevor ferguson a...|[trevor, ferguson...|(262144,[535,2710...|\n|<http://dbpedia.o...|        Grant Nelson|grant nelson born...|[grant, nelson, b...|(262144,[9094,952...|\n|<http://dbpedia.o...|        Cathy Caruth|cathy caruth born...|[cathy, caruth, b...|(262144,[4211,605...|\n|<http://dbpedia.o...|        Sophie Crumb|sophia violet sop...|[sophia, violet, ...|(262144,[2710,392...|\n|<http://dbpedia.o...|       Jenn Ashworth|jenn ashworth is ...|[jenn, ashworth, ...|(262144,[571,1105...|\n|<http://dbpedia.o...|    Jonathan Hoefler|jonathan hoefler ...|[jonathan, hoefle...|(262144,[4081,759...|\n|<http://dbpedia.o...|Anthony Gueterboc...|anthony fitzhardi...|[anthony, fitzhar...|(262144,[1164,123...|\n|<http://dbpedia.o...|  David Chernushenko|david chernushenk...|[david, chernushe...|(262144,[632,1156...|\n|<http://dbpedia.o...|      Joerg Steineck|joerg steineck is...|[joerg, steineck,...|(262144,[2456,394...|\n|<http://dbpedia.o...|      Andrew Pinsent|fr andrew pinsent...|[fr, andrew, pins...|(262144,[3373,459...|\n|<http://dbpedia.o...|Paddy Dunne (Gael...|paddy dunne was a...|[paddy, dunne, wa...|(262144,[619,3924...|\n|<http://dbpedia.o...|   Alexandros Mouzas|alexandros mouzas...|[alexandros, mouz...|(262144,[9396,941...|\n|<http://dbpedia.o...| John Angus Campbell|john angus campbe...|[john, angus, cam...|(262144,[4081,421...|\n+--------------------+--------------------+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579713196068_907081130","id":"20190919-163105_1685388362","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:23:39-0600","dateFinished":"2020-01-22T12:23:39-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340"},{"text":"%md\n## Hashing\nHashingTF computed term frequencies TF.  \nTF/IDF is the  measure of relevancy of each word in the document.   \nIDF package in Spark's ML library will compute TF/IDF for every term in every document.  \nOutput is sparse vector containing TF/IDF scores for each word","user":"anonymous","dateUpdated":"2020-01-22T12:52:21-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Hashing</h2>\n<p>HashingTF computed term frequencies TF.<br/>TF/IDF is the measure of relevancy of each word in the document.<br/>IDF package in Spark&rsquo;s ML library will compute TF/IDF for every term in every document.<br/>Output is sparse vector containing TF/IDF scores for each word</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196070_2019849654","id":"20190920-181304_1635234839","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:52:21-0600","dateFinished":"2020-01-22T12:52:21-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341"},{"text":"%spark.pyspark\n\nidf = IDF(inputCol=\"hashWords\", outputCol=\"tfidfWord\")\nidfModel = idf.fit(featurizedData)\nrescaledData = idfModel.transform(featurizedData)","user":"anonymous","dateUpdated":"2020-01-22T12:27:36-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1579713196071_-1213387635","id":"20190919-163911_404568739","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:27:36-0600","dateFinished":"2020-01-22T12:28:02-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342"},{"text":"%spark.pyspark\n\nrescaledData.show()\n","user":"anonymous","dateUpdated":"2020-01-22T12:28:08-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n|                 URI|                Name|            Document|          tokenWords|           hashWords|           tfidfWord|\n+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n|<http://dbpedia.o...|       Digby Morrell|digby morrell bor...|[digby, morrell, ...|(262144,[4081,410...|(262144,[4081,410...|\n|<http://dbpedia.o...|      Alfred J. Lewy|alfred j lewy aka...|[alfred, j, lewy,...|(262144,[1215,236...|(262144,[1215,236...|\n|<http://dbpedia.o...|       Harpdog Brown|harpdog brown is ...|[harpdog, brown, ...|(262144,[3008,440...|(262144,[3008,440...|\n|<http://dbpedia.o...| Franz Rottensteiner|franz rottenstein...|[franz, rottenste...|(262144,[1232,214...|(262144,[1232,214...|\n|<http://dbpedia.o...|              G-Enka|henry krvits born...|[henry, krvits, b...|(262144,[2366,659...|(262144,[2366,659...|\n|<http://dbpedia.o...|       Sam Henderson|sam henderson bor...|[sam, henderson, ...|(262144,[329,412,...|(262144,[329,412,...|\n|<http://dbpedia.o...|       Aaron LaCrate|aaron lacrate is ...|[aaron, lacrate, ...|(262144,[571,672,...|(262144,[571,672,...|\n|<http://dbpedia.o...|     Trevor Ferguson|trevor ferguson a...|[trevor, ferguson...|(262144,[535,2710...|(262144,[535,2710...|\n|<http://dbpedia.o...|        Grant Nelson|grant nelson born...|[grant, nelson, b...|(262144,[9094,952...|(262144,[9094,952...|\n|<http://dbpedia.o...|        Cathy Caruth|cathy caruth born...|[cathy, caruth, b...|(262144,[4211,605...|(262144,[4211,605...|\n|<http://dbpedia.o...|        Sophie Crumb|sophia violet sop...|[sophia, violet, ...|(262144,[2710,392...|(262144,[2710,392...|\n|<http://dbpedia.o...|       Jenn Ashworth|jenn ashworth is ...|[jenn, ashworth, ...|(262144,[571,1105...|(262144,[571,1105...|\n|<http://dbpedia.o...|    Jonathan Hoefler|jonathan hoefler ...|[jonathan, hoefle...|(262144,[4081,759...|(262144,[4081,759...|\n|<http://dbpedia.o...|Anthony Gueterboc...|anthony fitzhardi...|[anthony, fitzhar...|(262144,[1164,123...|(262144,[1164,123...|\n|<http://dbpedia.o...|  David Chernushenko|david chernushenk...|[david, chernushe...|(262144,[632,1156...|(262144,[632,1156...|\n|<http://dbpedia.o...|      Joerg Steineck|joerg steineck is...|[joerg, steineck,...|(262144,[2456,394...|(262144,[2456,394...|\n|<http://dbpedia.o...|      Andrew Pinsent|fr andrew pinsent...|[fr, andrew, pins...|(262144,[3373,459...|(262144,[3373,459...|\n|<http://dbpedia.o...|Paddy Dunne (Gael...|paddy dunne was a...|[paddy, dunne, wa...|(262144,[619,3924...|(262144,[619,3924...|\n|<http://dbpedia.o...|   Alexandros Mouzas|alexandros mouzas...|[alexandros, mouz...|(262144,[9396,941...|(262144,[9396,941...|\n|<http://dbpedia.o...| John Angus Campbell|john angus campbe...|[john, angus, cam...|(262144,[4081,421...|(262144,[4081,421...|\n+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579713196073_1470384118","id":"20190919-170922_1311341956","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:28:08-0600","dateFinished":"2020-01-22T12:28:08-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:343"},{"text":"%md\n## Search\nSearch for word = \"clinton\"\nFind hash value of word \"clinton\" ","user":"anonymous","dateUpdated":"2020-01-22T12:52:45-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Search</h2>\n<p>Search for word = &ldquo;clinton&rdquo;<br/>Find hash value of word &ldquo;clinton&rdquo;</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196074_-509163705","id":"20190920-181529_1846595231","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:52:45-0600","dateFinished":"2020-01-22T12:52:46-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344"},{"text":"%spark.pyspark\n\nfrom pyspark.sql.types import *\n\nschema = StructType([StructField(\"tokenWords\", ArrayType(StringType()))])\n\ndf = spark.createDataFrame(([[[\"clinton\"]]]), schema).toDF(\"tokenWords\")\ndf.show()\n\nsearchWord = hashingTF.transform(df)\nsearchWord.show()\n","user":"anonymous","dateUpdated":"2020-01-22T12:41:06-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+\n|tokenWords|\n+----------+\n| [clinton]|\n+----------+\n\n+----------+--------------------+\n|tokenWords|           hashWords|\n+----------+--------------------+\n| [clinton]|(262144,[36974],[...|\n+----------+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1579717863656_666243708","id":"20200122-123103_1952390945","dateCreated":"2020-01-22T12:31:03-0600","dateStarted":"2020-01-22T12:41:06-0600","dateFinished":"2020-01-22T12:41:07-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"text":"%spark.pyspark\n\nsearchWord = hashingTF.transform(df)\nsearchWord.show()\n\nfeatureVec = searchWord.select('hashWords').collect()\nprint(featureVec)\n\nsearchWordID = int(featureVec[0].hashWords.indices[0])\nprint(searchWordID)","user":"anonymous","dateUpdated":"2020-01-22T12:42:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+--------------------+\n|tokenWords|           hashWords|\n+----------+--------------------+\n| [clinton]|(262144,[36974],[...|\n+----------+--------------------+\n\n[Row(hashWords=SparseVector(262144, {36974: 1.0}))]\n36974\n"}]},"apps":[],"jobName":"paragraph_1579713196075_1682348740","id":"20190920-140051_48490882","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:42:27-0600","dateFinished":"2020-01-22T12:42:28-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:346"},{"text":"%md\n## Score\nExtract the TF/IDF score for searchWord from every article.","user":"anonymous","dateUpdated":"2020-01-22T12:53:32-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Score</h2>\n<p>Extract the TF/IDF score for searchWord from every article.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196077_-182523100","id":"20190920-181632_1221085930","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:53:32-0600","dateFinished":"2020-01-22T12:53:32-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:347"},{"text":"%spark.pyspark\n\n\nfrom pyspark.sql.types import FloatType\nfrom pyspark.sql.functions import udf\n\nwordExtractor = udf(lambda x: float(x[searchWordID]), FloatType())\n\nsearchWordDF = rescaledData.withColumn('score', wordExtractor(rescaledData.tfidfWord))\nsearchWordDF.show()\n","user":"anonymous","dateUpdated":"2020-01-22T12:45:01-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+-----+\n|                 URI|                Name|            Document|          tokenWords|           hashWords|           tfidfWord|score|\n+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+-----+\n|<http://dbpedia.o...|       Digby Morrell|digby morrell bor...|[digby, morrell, ...|(262144,[4081,410...|(262144,[4081,410...|  0.0|\n|<http://dbpedia.o...|      Alfred J. Lewy|alfred j lewy aka...|[alfred, j, lewy,...|(262144,[1215,236...|(262144,[1215,236...|  0.0|\n|<http://dbpedia.o...|       Harpdog Brown|harpdog brown is ...|[harpdog, brown, ...|(262144,[3008,440...|(262144,[3008,440...|  0.0|\n|<http://dbpedia.o...| Franz Rottensteiner|franz rottenstein...|[franz, rottenste...|(262144,[1232,214...|(262144,[1232,214...|  0.0|\n|<http://dbpedia.o...|              G-Enka|henry krvits born...|[henry, krvits, b...|(262144,[2366,659...|(262144,[2366,659...|  0.0|\n|<http://dbpedia.o...|       Sam Henderson|sam henderson bor...|[sam, henderson, ...|(262144,[329,412,...|(262144,[329,412,...|  0.0|\n|<http://dbpedia.o...|       Aaron LaCrate|aaron lacrate is ...|[aaron, lacrate, ...|(262144,[571,672,...|(262144,[571,672,...|  0.0|\n|<http://dbpedia.o...|     Trevor Ferguson|trevor ferguson a...|[trevor, ferguson...|(262144,[535,2710...|(262144,[535,2710...|  0.0|\n|<http://dbpedia.o...|        Grant Nelson|grant nelson born...|[grant, nelson, b...|(262144,[9094,952...|(262144,[9094,952...|  0.0|\n|<http://dbpedia.o...|        Cathy Caruth|cathy caruth born...|[cathy, caruth, b...|(262144,[4211,605...|(262144,[4211,605...|  0.0|\n|<http://dbpedia.o...|        Sophie Crumb|sophia violet sop...|[sophia, violet, ...|(262144,[2710,392...|(262144,[2710,392...|  0.0|\n|<http://dbpedia.o...|       Jenn Ashworth|jenn ashworth is ...|[jenn, ashworth, ...|(262144,[571,1105...|(262144,[571,1105...|  0.0|\n|<http://dbpedia.o...|    Jonathan Hoefler|jonathan hoefler ...|[jonathan, hoefle...|(262144,[4081,759...|(262144,[4081,759...|  0.0|\n|<http://dbpedia.o...|Anthony Gueterboc...|anthony fitzhardi...|[anthony, fitzhar...|(262144,[1164,123...|(262144,[1164,123...|  0.0|\n|<http://dbpedia.o...|  David Chernushenko|david chernushenk...|[david, chernushe...|(262144,[632,1156...|(262144,[632,1156...|  0.0|\n|<http://dbpedia.o...|      Joerg Steineck|joerg steineck is...|[joerg, steineck,...|(262144,[2456,394...|(262144,[2456,394...|  0.0|\n|<http://dbpedia.o...|      Andrew Pinsent|fr andrew pinsent...|[fr, andrew, pins...|(262144,[3373,459...|(262144,[3373,459...|  0.0|\n|<http://dbpedia.o...|Paddy Dunne (Gael...|paddy dunne was a...|[paddy, dunne, wa...|(262144,[619,3924...|(262144,[619,3924...|  0.0|\n|<http://dbpedia.o...|   Alexandros Mouzas|alexandros mouzas...|[alexandros, mouz...|(262144,[9396,941...|(262144,[9396,941...|  0.0|\n|<http://dbpedia.o...| John Angus Campbell|john angus campbe...|[john, angus, cam...|(262144,[4081,421...|(262144,[4081,421...|  0.0|\n+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579713196080_-1818664999","id":"20190920-150831_759727464","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:45:01-0600","dateFinished":"2020-01-22T12:45:09-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:348"},{"text":"%md\n## Sort\nSort Document By Score of the searchWord","user":"anonymous","dateUpdated":"2020-01-22T12:53:46-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Sort</h2>\n<p>Sort Document By Score of the searchWord</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579713196082_1790569712","id":"20190920-181841_1288180392","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:53:46-0600","dateFinished":"2020-01-22T12:53:46-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:349"},{"text":"%spark.pyspark\n\nsortedResults = searchWordDF.filter(\"score > 0\").orderBy('score', ascending=False).select('URI', 'Name', 'Document', 'score')\nsortedResults.show(truncate=100)","user":"anonymous","dateUpdated":"2020-01-22T12:45:49-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------------------------------------------+-----------------------+----------------------------------------------------------------------------------------------------+---------+\n|                                                  URI|                   Name|                                                                                            Document|    score|\n+-----------------------------------------------------+-----------------------+----------------------------------------------------------------------------------------------------+---------+\n|           <http://dbpedia.org/resource/Bill_Clinton>|           Bill Clinton|william jefferson bill clinton born william jefferson blythe iii august 19 1946 is an american po...| 50.10216|\n|            <http://dbpedia.org/resource/Dick_Morris>|            Dick Morris|richard s dick morris born november 28 1946 is an american political author and commentator who p...|27.328451|\n|           <http://dbpedia.org/resource/Kris_Engskov>|           Kris Engskov|kris engskov was president bill clintons aide from 1997 to 2000 he was hired one month before the...|27.328451|\n|           <http://dbpedia.org/resource/Connie_Hamzy>|           Connie Hamzy|sweet connie hamzy born january 9 1955 also called sweet sweet connie is an american woman from l...|27.328451|\n|       <http://dbpedia.org/resource/Sheffield_Nelson>|       Sheffield Nelson|e sheffield nelson born april 23 1941 is an american attorney businessman and politician from lit...| 22.77371|\n|             <http://dbpedia.org/resource/Jill_Alper>|             Jill Alper|jill alper born september 12 1965 is an american political campaigner who heads the dewey square ...| 22.77371|\n|       <http://dbpedia.org/resource/Edward_L._Widmer>|       Edward L. Widmer|edward ted ladd widmer born 1963 is a historian writer and librarian who served as a speechwriter...|18.218967|\n|<http://dbpedia.org/resource/Jane_Scott_(politician)>|Jane Scott (politician)|jane antoinette scott obe born 1947 is an english conservative politician leader of the wiltshire...|18.218967|\n|       <http://dbpedia.org/resource/Hershel_W._Gober>|       Hershel W. Gober|hershel wayne gober born december 21 1936 is a former government official and vietnam war veteran...|18.218967|\n|         <http://dbpedia.org/resource/David_J._Hayes>|         David J. Hayes|david j hayes is a distinguished visiting lecturer at law at stanford law school as a visiting le...|18.218967|\n|       <http://dbpedia.org/resource/Patrick_J._Kelly>|       Patrick J. Kelly|patrick j pat kelly born september 8 1935 in sioux lookout ontario was one of the founders and th...|13.664226|\n|             <http://dbpedia.org/resource/Joe_Andrew>|             Joe Andrew|joseph j andrew born march 1 1960 in an american politician and lawyer he was national chairman o...|13.664226|\n|               <http://dbpedia.org/resource/Jack_Lew>|               Jack Lew|jacob joseph jack lew born august 29 1955 is an american government administrator and attorney wh...|13.664226|\n|         <http://dbpedia.org/resource/Frank_Holleman>|         Frank Holleman|frank holleman is an attorney and politician from south carolina who was the democratic partys no...|13.664226|\n|      <http://dbpedia.org/resource/Richard_Socarides>|      Richard Socarides|richard socarides born 1954 is a democratic political strategist writer commentator and a new yor...|13.664226|\n|      <http://dbpedia.org/resource/Kendall_Ciesemier>|      Kendall Ciesemier|kendall ciesemier is an american youth volunteer from wheaton illinois and a student at georgetow...|13.664226|\n|     <http://dbpedia.org/resource/Federico_Pe%C3%B1a>|     Federico Pe%C3%B1a|federico fabian pea born march 15 1947 was united states secretary of transportation from 1993 to...|13.664226|\n|          <http://dbpedia.org/resource/Donnie_Fowler>|          Donnie Fowler|donnie fowler born 1967 is an american entrepreneur and political activist from columbia south ca...|13.664226|\n|           <http://dbpedia.org/resource/Sandy_Berger>|           Sandy Berger|samuel richard sandy berger born october 28 1945 was united states national security advisor unde...|13.664226|\n|              <http://dbpedia.org/resource/Don_Lewin>|              Don Lewin|donald ja don lewin obe born 1933 is the chairman and founder of clinton cards a chain of greetin...|13.664226|\n+-----------------------------------------------------+-----------------------+----------------------------------------------------------------------------------------------------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579713196085_1000136162","id":"20190920-153230_1762338676","dateCreated":"2020-01-22T11:13:16-0600","dateStarted":"2020-01-22T12:45:49-0600","dateFinished":"2020-01-22T12:46:37-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:350"},{"text":"%spark.pyspark\n","user":"anonymous","dateUpdated":"2020-01-22T11:13:16-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579713196087_1484706881","id":"20190920-175342_171050402","dateCreated":"2020-01-22T11:13:16-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:351"}],"name":"TF-IDF","id":"2F13GUVA1","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}